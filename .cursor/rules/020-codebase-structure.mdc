---
description: 
globs: 
alwaysApply: true
---
# Codebase Structure and Commands

## Project Structure

The project follows a monorepo structure using pnpm workspaces:

### Core Directories
- `apps/` - Main applications
  - `api/` - Backend API service (Bun + Hono)
  - `desktop/` - Tauri desktop application
  - `web/` - Next.js web application
- `packages/` - Shared packages and utilities
  - `config-eslint/` - Shared ESLint configurations
  - `config-typescript/` - Shared TypeScript configurations
  - `database/` - Database schema and client (Drizzle ORM)
  - `utils/` - Shared utilities and type definitions
- `.cursor/` - Project rules and documentation
- `.vscode/` - VS Code configuration
- `.turbo/` - Turborepo cache and configuration

### Configuration Files
- `package.json` - Root project dependencies and scripts
- `pnpm-workspace.yaml` - Workspace configuration
- `turbo.json` - Turborepo configuration
- `compose.yml` - Docker Compose for local development
- `.gitignore` - Git ignore configuration

## Available Commands

### Development Commands
```bash
# Start development servers
pnpm dev                    # Start desktop development (default)
pnpm --filter api dev       # Start API development server
pnpm --filter desktop dev   # Start desktop development
pnpm --filter web dev       # Start web development server

# Code Quality
pnpm lint                  # Run linting
pnpm format               # Format code with Prettier
```

### Database Commands
```bash
pnpm db:push              # Push schema to database
pnpm db:migrate:deploy    # Deploy migrations to database
pnpm db:seed              # Seed database with initial data
pnpm generate             # Generate database migrations
```

### Build Commands
```bash
pnpm build                 # Build all packages and applications
pnpm --filter web build    # Build only web application
pnpm --filter desktop build # Build only desktop application
pnpm --filter api build    # Build only API
```

### Package Management
```bash
# Add dependencies to specific packages
pnpm add <package> --filter <package-name>      # Add production dependency
pnpm add -D <package> --filter <package-name>   # Add dev dependency
```

## Development Setup

1. Install dependencies:
   ```bash
   npm i -g pnpm
   pnpm install
   ```

2. Configure environment:
   - Create appropriate environment files for each app
   - Fill required environment variables

3. Start development:
   ```bash
   # Start desktop app (default)
   pnpm dev
   
   # Or start individual apps
   pnpm --filter api dev
   pnpm --filter desktop dev
   pnpm --filter web dev
   ```

4. Build for production:
   ```bash
   pnpm build
   ```

## Best Practices

1. Always use pnpm for package management
2. Use the `--filter` flag when working with specific packages
3. Keep shared code in the appropriate packages directory (`packages/utils`, `packages/database`, etc.)
4. Follow the established environment variable conventions
5. Run code quality checks before committing:
   ```bash
   pnpm lint
   pnpm check-types
   ``` 